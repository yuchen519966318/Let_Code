题目：

Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

/*
 * 步骤分析：
 * 核心思想：最后要求返回对应值的下标，并且不能从0开始
 * 	    用map集合存储输入的数组，key=val; value=index;
 *          查看map中是否有 这样的Key:target-nums[i];
 * 	       如果有就返回+1的结果
 * 	       如果没有就返回null;
 */
public class Solution_2 {
	//测试
	public static void main(String[] args){
		int[] a = new int[]{9,7,1,15,8};
		int target = 17;
		System.out.println(Arrays.toString(twoSum(a, target)));
		
	}
        
	//实现方法
	public static int[] twoSum(int[] nums,int target){
		//创建一个集合，集合的key为nums[i] ,value存储 i;
		Map<Integer, Integer> maps = new HashMap<Integer,Integer>();
		
		//判断
		for(int i = 0;i < nums.length; i++){
    
			//将数组放入集合中
			maps.put(nums[i], i);
      
			//判断集合中是否包含 target-nums[i] 的key
			if(maps.containsKey(target-nums[i])){
				int index1 = maps.get(target-nums[i])+1;
				int index2 = i + 1;
				return new int[]{index1,index2};
			}
		
		}
		
		return null;
	}
}
